# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing_extensions import Self

from gretel_client._api.models.generation_parameters_input import (
    GenerationParametersInput,
)


class ModelConfigInput(BaseModel):
    """
    ModelConfigInput
    """  # noqa: E501

    alias: StrictStr
    api_base: Optional[StrictStr] = None
    api_key: Optional[StrictStr] = None
    generation_parameters: GenerationParametersInput
    is_reasoner: Optional[StrictBool] = False
    model_name: StrictStr
    __properties: ClassVar[List[str]] = [
        "alias",
        "api_base",
        "api_key",
        "generation_parameters",
        "is_reasoner",
        "model_name",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelConfigInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of generation_parameters
        if self.generation_parameters:
            _dict["generation_parameters"] = self.generation_parameters.to_dict()
        # set to None if api_base (nullable) is None
        # and model_fields_set contains the field
        if self.api_base is None and "api_base" in self.model_fields_set:
            _dict["api_base"] = None

        # set to None if api_key (nullable) is None
        # and model_fields_set contains the field
        if self.api_key is None and "api_key" in self.model_fields_set:
            _dict["api_key"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelConfigInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "alias": obj.get("alias"),
                "api_base": obj.get("api_base"),
                "api_key": obj.get("api_key"),
                "generation_parameters": GenerationParametersInput.from_dict(
                    obj["generation_parameters"]
                )
                if obj.get("generation_parameters") is not None
                else None,
                "is_reasoner": obj.get("is_reasoner")
                if obj.get("is_reasoner") is not None
                else False,
                "model_name": obj.get("model_name"),
            }
        )
        return _obj
