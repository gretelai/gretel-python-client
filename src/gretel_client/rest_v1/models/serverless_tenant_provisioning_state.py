# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, field_validator, StrictStr
from typing_extensions import Self


class ServerlessTenantProvisioningState(BaseModel):
    """
    State of the tenant provisioner
    """  # noqa: E501

    status: Optional[StrictStr] = None
    encryption_key: Optional[StrictStr] = None
    allocated_disk_bytes: Optional[StrictStr] = None
    updated_at: datetime
    __properties: ClassVar[List[str]] = [
        "status",
        "encryption_key",
        "allocated_disk_bytes",
        "updated_at",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "PROVISIONING_STATUS_UNKNOWN",
                "UNPROVISIONED",
                "INPROGRESS",
                "COMPLETED",
                "ERROR",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('PROVISIONING_STATUS_UNKNOWN', 'UNPROVISIONED', 'INPROGRESS', 'COMPLETED', 'ERROR')"
            )
        return value

    @field_validator("encryption_key")
    def encryption_key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["KEY_UNKNOWN", "GRETEL_MANAGED", "CUSTOMER_KEY", "INVALID_KEY"]
        ):
            raise ValueError(
                "must be one of enum values ('KEY_UNKNOWN', 'GRETEL_MANAGED', 'CUSTOMER_KEY', 'INVALID_KEY')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerlessTenantProvisioningState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerlessTenantProvisioningState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status": obj.get("status"),
                "encryption_key": obj.get("encryption_key"),
                "allocated_disk_bytes": obj.get("allocated_disk_bytes"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
